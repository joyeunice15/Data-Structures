#include <iostream>
#include <stack>
using namespace std;

string convert(string infix);
int precedence(char op);
bool isOperator(char ch);
bool isOperand(char ch);

int main()
{
    string infix, postfix;
    int ch;
    do
    {
        cout << "Enter the infix expression:" << endl;
        cin >> infix;
        postfix = convert(infix);
        cout << "Postfix expression: " << postfix << endl;
        cout << "Do you want to enter the infix expression again (1/0)?" << endl;
        cin >> ch;
    } while (ch == 1);
    return 0;
}

int precedence(char op)
{
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    if (op == '^')
        return 3;
    return 0;
}

bool isOperator(char ch)
{
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

bool isOperand(char ch)
{
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9');
}

string convert(string infix)
{
    stack<char> s;
    string postfix = "";
    for (int i = 0; i < infix.length(); i++)
    {
        char ch = infix[i];

        if (isOperand(ch))
        {
            postfix += ch;
        }
        else if (ch == '(')
        {
            s.push(ch);
        }
        else if (ch == ')')
        {
            while (!s.empty() && s.top() != '(')
            {
                postfix += s.top();
                s.pop();
            }
            if (!s.empty() && s.top() == '(')
                s.pop();
        }
        else if (isOperator(ch))
        {
            while (!s.empty() && precedence(s.top()) >= precedence(ch))
            {
                postfix += s.top();
                s.pop();
            }
            s.push(ch);
        }
    }
    while (!s.empty())
    {
        postfix += s.top();
        s.pop();
    }

    return postfix;
}
